#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Recursively walks sys.argv[1], for each file checks if file type determined
# by libmagic (also used by "file" utility) corresponds to the file extension.

from natsort import natsorted as naturalsorted
import magic
import multiprocessing
import os
import shutil
import subprocess
import sys
import tqdm

# Number of worker threads.
THREAD_COUNT = os.cpu_count()
PRECACHE_CHUNK_SIZE = 1 * 1024 * 1024 * 1024

# Number of files per batch.
NFILES_IN_BATCH = 16

bad_files = {
    'jpeg': [],
    'png':  [],
    'webp': [],
    'gif':  [],
    'mp4':  [],
    'webm': [],
    'ts':   [],
    'gifv': [],
    'known': [],
    'magic': [],
}

magic_checker = magic.Magic()


def check_file_extension(filename):
    fn = filename.lower()
    try:
        m = magic_checker.from_file(filename)
    except magic.MagicException:
        return ('magic', filename)

    if fn.endswith('.jpg') or fn.endswith('.jpeg'):
        if not m.startswith('JPEG image data'):
            return ('jpeg', filename)
        return None

    if fn.endswith('.png') or fn.endswith('.PNG'):
        if not m.startswith('PNG image data'):
            return ('png', filename)
        return None

    if fn.endswith('.webp'):
        if not m.startswith('RIFF (little-endian) data, Web/P image'):
            return ('webp', filename)
        return None

    if fn.endswith('.gif'):
        if not m.startswith('GIF image data'):
            return ('gif', filename)
        return None

    if fn.endswith('.mov') or fn.endswith('.mp4'):
        if not m.startswith('ISO Media, MP4 v2') and \
           not m.startswith('ISO Media, Apple QuickTime movie, Apple QuickTime') and \
           not m.startswith('ISO Media, MP4 Base Media') and \
           not m.startswith('ISO Media, Apple iTunes Video') and \
           not m.startswith('ISO Media, MPEG v4 system') and \
           not m.startswith('ISO Media, MPEG-4 (.MP4) for SonyPSP') and \
           m != 'ISO Media':
            return ('mp4', filename)
        return None

    if fn.endswith('.webm'):
        if not m.startswith('WebM'):
            return ('webm', filename)
        return None

    if fn.endswith('.ts'):
        if not m.startswith('MPEG transport stream data'):
            return ('ts', filename)
        return None

    if fn.endswith('.gifv'):
        if not m.startswith('WebM') and \
           not m.startswith('ISO Media, MP4 Base Media'):
            return ('gifv', filename)
        return None

    return ('known', filename)


def split_filelist_into_chunks(file_list):
    file_list_chunks = []
    current_chunk = []
    current_chunk_bytesize = 0
    for fn in file_list:
        file_size = os.path.getsize(fn)
        limit_exceeded = \
            current_chunk_bytesize + file_size > PRECACHE_CHUNK_SIZE
        if limit_exceeded and len(current_chunk) > 0:
            file_list_chunks.append(current_chunk)
            current_chunk = []
            current_chunk_bytesize = 0

        current_chunk.append(fn)
        current_chunk_bytesize += file_size

    if len(current_chunk) > 0:
        file_list_chunks.append(current_chunk)
        current_chunk = []
        current_chunk_bytesize = 0

    assert sum(len(c) for c in file_list_chunks) == len(file_list)
    assert [entry for chunk in file_list_chunks for entry in chunk] == file_list

    return file_list_chunks


def main():
    directory_to_process = '.'
    if len(sys.argv) > 1:
        directory_to_process = sys.argv[1]
    file_list = []

    for root, subdirs, files in os.walk(directory_to_process):
        if len(files) == 0:
            continue

        for fname in files:
            lc_fname = fname.lower()
            full_fname = os.path.join(root, fname)
            file_list.append(full_fname)

    pool = multiprocessing.Pool(THREAD_COUNT)
    progress_bar = tqdm.tqdm(total=len(file_list))
    num_of_bad_files = 0

    file_list_chunks = split_filelist_into_chunks(file_list)

    for chunk in file_list_chunks:
        precache_cmd = shutil.which('precache')
        if precache_cmd is not None:
            print('precaching chunk')
            precache_task = ''.join(entry + '\n' for entry in chunk)
            subprocess.run([precache_cmd], input=precache_task.encode('utf-8'))

        for res in pool.imap_unordered(check_file_extension, chunk,
                                       NFILES_IN_BATCH):
            progress_bar.update(1)
            if res is not None:
                file_type, file_name = res
                bad_files[file_type].append(file_name)
                num_of_bad_files += 1
                progress_bar.set_postfix(found_bad=num_of_bad_files)

    progress_bar.close()

    all_ok = True
    for file_type in bad_files:
        filelist = naturalsorted(bad_files[file_type])
        if len(filelist) > 0:
            all_ok = False
            print('{:12}{}'.format('not ' + file_type + ':', len(filelist)))
            result_filename = 'not_' + file_type + '.txt'
            with open(result_filename, 'w') as f:
                f.write('\n'.join(filelist) + '\n')

    if all_ok:
        print()
        print('All OK')


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print('\ncaught KeyboardInterrupt')
