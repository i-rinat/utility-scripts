#!/usr/bin/env python3

from collections import namedtuple
from natsort import natsorted as naturalsorted
from pprint import pprint
import multiprocessing
import os
import subprocess
import sys
import tqdm

BATCH_SIZE = 1
THREAD_COUNT = os.cpu_count()

WorkerResult = namedtuple('WorkerResult',
                          ['bad_files', 'unknown_files'])


def verify_file(fname):
    bad_files = []
    unknown_files = []

    lc_fname = fname.lower()

    if lc_fname.endswith('.jpg') or lc_fname.endswith('.jpeg'):
        r = subprocess.run(['djpeg', '-fast', fname], capture_output=True)

    elif lc_fname.endswith('.png'):
        r = subprocess.run(['pngtopnm', fname], capture_output=True)

    elif lc_fname.endswith('.gif'):
        r = subprocess.run(['gifsicle', fname], capture_output=True)

    elif lc_fname.endswith('.webp'):
        r = subprocess.run(['dwebp', '-pam', '-o', '/dev/null', fname],
                           capture_output=True)
    elif any(lc_fname.endswith(x) for x in ['.txt', '.mp4', '.mov']):
        # Ignore.
        r = subprocess.run(['true'])
    else:
        print('unknown: {}'.format(fname))
        unknown_files.append(fname)
        r = subprocess.run(['true'])

    if r.returncode != 0:
        print('bad: {}'.format(fname))
        bad_files.append(fname)

    return WorkerResult(bad_files=bad_files, unknown_files=unknown_files)


def process_directory(directory_name):
    file_list = []
    for root, subdirs, files in os.walk(directory_name):
        if len(files) == 0:
            continue

        for fname in files:
            lc_fname = fname.lower()
            full_fname = os.path.join(root, fname)

            file_list.append(full_fname)

    p = multiprocessing.Pool(THREAD_COUNT)
    progress_bar = tqdm.tqdm(total=len(file_list))

    results = []
    for idx, res in enumerate(p.imap_unordered(verify_file, file_list,
                                               BATCH_SIZE)):
        progress_bar.update(1)
        results.append(res)

    progress_bar.close()

    bad_files = []
    unknown_files = []
    for r in results:
        bad_files.extend(r.bad_files)
        unknown_files.extend(r.unknown_files)

    if len(bad_files) > 0:
        print('Bad files were found ({}).'.format(len(bad_files)))

    if len(unknown_files) > 0:
        print('Files of unknown type were found ({}).'.
              format(len(unknown_files)))

    with open('verify-report.txt', 'w') as f:
        for fname in naturalsorted(bad_files):
            f.write('bad: {}\n'.format(fname))

        for fname in naturalsorted(unknown_files):
            f.write('unknown: {}\n'.format(fname))

    if len(bad_files) == 0 and len(unknown_files) == 0:
        print('All OK.')


def main():
    process_directory(sys.argv[1])


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print('\ncaught KeyboardInterrupt')
